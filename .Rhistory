add.params = list(color = "贫血三分类"),
palette = "jco"
)+
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons) +
ggtitle(paste0("比较三组中", 'CRP差异'))  # Add pairwise comparisons p-value
# stat_compare_means(label.y = 5)
p_test %>% print()
c(p_test, p_淋巴细胞)
p_vec = c(p_test, p_淋巴细胞)
print(p_vec)
apply(p_vec, 1, print)
tapply(p_vec, print)
lapply(p_vec, print)
print(p_test)
tapply(p_vec, print)
lapply(p_vec, print)
tapply(p_vec, ggplot2.print)
print(p_test$layers)
print(p_test)
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
print(p)
plot_items_cop =
function(df_d, group, var_set, my_comparisons =
list(c("0", "1"), c("1", "2"), c("0", "2")), y_lab="差异") {
l_p = vector()
for(i in 1:length(var_set) ) {
var_y = var_set[i]
p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons)
# ggtitle(paste0("比较三组中", y_lab))
}
}
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
print(p)
plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" ) %>% print()
plot_items_cop =
function(df_d, group, var_set, my_comparisons =
list(c("0", "1"), c("1", "2"), c("0", "2")), y_lab="差异") {
l_p = vector()
for(i in 1:length(var_set) ) {
var_y = var_set[i]
# p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons)
# ggtitle(paste0("比较三组中", y_lab))
}
}
plot_items_cop =
function(df_d, group, var_set, my_comparisons =
list(c("0", "1"), c("1", "2"), c("0", "2")), y_lab="差异") {
l_p = vector()
for(i in 1:length(var_set) ) {
var_y = var_set[i]
# p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons)
# ggtitle(paste0("比较三组中", y_lab))
l_p = c(l_p, p_i)
}
return(l_p)
}
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
plot_items_cop =
function(df_d, group, var_set, my_comparisons =
list(c("0", "1"), c("1", "2"), c("0", "2")), y_lab="差异") {
l_p = vector()
for(i in 1:length(var_set) ) {
var_y = var_set[i]
p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons)
# ggtitle(paste0("比较三组中", y_lab))
l_p = c(l_p, p_i)
}
return(l_p)
}
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
print(p)
print(p[1])
p[1]
p[[1]]
plot_items_cop =
function(df_d, group, var_set, my_comparisons =
list(c("0", "1"), c("1", "2"), c("0", "2")), y_lab="差异") {
l_p = vector()
for(i in 1:length(var_set) ) {
var_y = var_set[i]
# p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons)
# ggtitle(paste0("比较三组中", y_lab))
# l_p = c(l_p, p_i)
}
# return(l_p)
}
# par(mfrow=c(3,3))
plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
# par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
plot_items_cop =
function(df_d, group, var_set, my_comparisons =
list(c("0", "1"), c("1", "2"), c("0", "2")), y_lab="差异") {
l_p = vector()
for(i in 1:length(var_set) ) {
var_y = var_set[i]
# p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons) +
ggtitle(paste0("比较三组中", var_y))
# l_p = c(l_p, p_i)
}
# return(l_p)
}
# par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
df_d = df_差异作图
group = "贫血三分类"
var_y = "CRP差异"
for(i in 1:length(var_set) ) {
var_y = var_set[i]
# p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons) +
ggtitle(paste0("比较三组中", var_y))
# l_p = c(l_p, p_i)
}
df_d = df_差异作图
group = "贫血三分类"
var_set = "CRP差异"
for(i in 1:length(var_set) ) {
var_y = var_set[i]
# p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons) +
ggtitle(paste0("比较三组中", var_y))
# l_p = c(l_p, p_i)
}
df_d = df_差异作图
group = "贫血三分类"
var_set = "CRP差异"
for(i in 1:length(var_set) ) {
var_y = var_set[i]
p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons) +
ggtitle(paste0("比较三组中", var_y))
print(p_i)
# l_p = c(l_p, p_i)
}
plot_items_cop =
function(df_d, group, var_set, my_comparisons =
list(c("0", "1"), c("1", "2"), c("0", "2")), y_lab="差异") {
l_p = vector()
for(i in 1:length(var_set) ) {
var_y = var_set[i]
p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons) +
ggtitle(paste0("比较三组中", var_y))
print(p_i)
}
# return(l_p)
}
# par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", "CRP差异" )
df_d = df_差异作图
group = "贫血三分类"
var_set = "CRP差异"
for(i in 1:length(var_set) ) {
par(mfrow=c(3,3))
var_y = var_set[i]
p_i =
ggline(df_d, x = group, y = var_y,
# combine = TRUE,
ylab = y_lab,
color = "gray",                                     # Line color
add = c("mean_sd", "violin", "jitter"),
add.params = list(color = group),
palette = "jco"
) +
stat_compare_means(method = 'wilcox.test', comparisons = my_comparisons) +
ggtitle(paste0("比较三组中", var_y))
print(p_i)
# l_p = c(l_p, p_i)
}
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", var_实验室检查_差异 )
p %>% print()
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", var_实验室检查_差异 )
par(mfrow=c(3,3))
p = plot_items_cop(df_差异作图, "贫血三分类", var_实验室检查_差异 )
?print
df_基线人口学比较结果 = comp_基线人口学比较$Table
df_基线实验室检查比较结果 = comp_基线实验室检查比较$Table
## 研究一的多因素分析表格已经给出为docx
df_随访人口学比较结果 = comp_随访人口学比较
df_随访实验室检查比较结果 = comp_随访实验室检查比较
install.packages("writexl")
# export dataframe as excel file
library("writexl")
write_xlsx(df_基线人口学比较结果,"outputs/12_feb_table/df_基线人口学比较结果.xlsx")
write_xlsx(df_基线人口学比较结果,"outputs/12_feb_table/df_基线人口学比较结果.xlsx")
write_xlsx(df_基线实验室检查比较结果,"outputs/12_feb_table/df_基线实验室检查比较结果.xlsx")
write_xlsx(df_随访人口学比较结果,"outputs/12_feb_table/df_随访人口学比较结果.xlsx")
write_xlsx(df_随访实验室检查比较结果,"outputs/12_feb_table/df_随访实验室检查比较结果.xlsx")
comp_基线人口学比较 =
twogrps(df_grpcop_log[-1], "是否贫血(阈值100g)",
varlist = c(var_人口学, var_中药治疗, var_贫血结局[2]),
skewvar = ("年龄"),
ShowStatistic = T, ExtractP = 0.2)
comp_基线实验室检查比较 =
twogrps(df_grpcop_log[-1], "是否贫血(阈值100g)",
varlist = var_实验室检查_基线,
skewvar = var_实验室检查_基线,
ShowStatistic = T, ExtractP = 0.2)
comp_基线实验室检查比较$Table
write_xlsx(df_基线人口学比较结果,"outputs/12_feb_table/df_基线人口学比较结果.xlsx")
write_xlsx(df_基线实验室检查比较结果,"outputs/12_feb_table/df_基线实验室检查比较结果.xlsx")
write_xlsx(df_随访人口学比较结果,"outputs/12_feb_table/df_随访人口学比较结果.xlsx")
write_xlsx(df_随访实验室检查比较结果,"outputs/12_feb_table/df_随访实验室检查比较结果.xlsx")
write_xlsx(df_基线人口学比较结果,"outputs/12_feb_table/df_基线人口学比较结果.xlsx")
write_xlsx(df_基线实验室检查比较结果,"outputs/12_feb_table/df_基线实验室检查比较结果.xlsx")
write_xlsx(df_随访人口学比较结果,"outputs/12_feb_table/df_随访人口学比较结果.xlsx")
write_xlsx(df_随访实验室检查比较结果,"outputs/12_feb_table/df_随访实验室检查比较结果.xlsx")
comp_基线实验室检查比较$Table %>% row.names()
comp_基线实验室检查比较$Table
df_基线人口学比较结果 = comp_基线人口学比较$Table
df_基线实验室检查比较结果 = comp_基线实验室检查比较$Table
## 研究一的多因素分析表格已经给出为docx
df_随访人口学比较结果 = comp_随访人口学比较
df_随访实验室检查比较结果 = comp_随访实验室检查比较
write_xlsx(df_基线人口学比较结果,"outputs/12_feb_table/df_基线人口学比较结果.xlsx")
write_xlsx(df_基线实验室检查比较结果,"outputs/12_feb_table/df_基线实验室检查比较结果.xlsx")
write_xlsx(df_随访人口学比较结果,"outputs/12_feb_table/df_随访人口学比较结果.xlsx")
write_xlsx(df_随访实验室检查比较结果,"outputs/12_feb_table/df_随访实验室检查比较结果.xlsx")
comp_基线人口学比较 =
twogrps(df_grpcop_log[-1], "是否贫血(阈值100g)",
varlist = c(var_人口学, var_中药治疗, var_贫血结局[2]),
skewvar = c(var_人口学, var_中药治疗, var_贫血结局[2]),
ShowStatistic = T, ExtractP = 0.2)
comp_基线人口学比较 =
twogrps(df_grpcop_log[-1], "是否贫血(阈值100g)",
varlist = c(var_人口学, var_中药治疗, var_贫血结局[2]),
skewvar = ("年龄"),
ShowStatistic = T, ExtractP = 0.2)
comp_基线实验室检查比较 =
twogrps(df_grpcop_log[-1], "是否贫血(阈值100g)",
varlist = var_实验室检查_基线,
skewvar = var_实验室检查_基线,
ShowStatistic = T, ExtractP = 0.2)
var_实验室检查_基线
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# load the useful packages
library(dplyr)
library(plotly)
library(CBCgrps)
library(networkD3)
raw_data = read.csv("outputs/raw_data.csv", encoding="UTF-8")
raw_data[raw_data==""] = NA # convert the null values to NA
raw_data = raw_data[,1:78]
raw_data %>% dim()
raw_data %>% names()
df_immu = raw_data[,c("姓名", "IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1")]
df_immu %>% head()
df_immu[(df_immu$CRP=="<1") & !is.na(df_immu$CRP), "CRP"] = 1
df_immu[(df_immu$CRP.1=="<1") & !is.na(df_immu$CRP.1), "CRP.1"] = 1
df_immu[(df_immu$CRP.1=="＜1") & !is.na(df_immu$CRP.1), "CRP.1"] = 1 # 有个全角的
df_immu[, "CRP"] = df_immu[, "CRP"] %>% as.numeric
df_immu[, "CRP.1"] = df_immu[, "CRP.1"] %>% as.numeric
df_immu[(df_immu$CRP=="<1") & !is.na(df_immu$CRP), "CRP"] = 1
df_immu[(df_immu$CRP.1=="<1") & !is.na(df_immu$CRP.1), "CRP.1"] = 1
df_immu[(df_immu$CRP.1=="＜1") & !is.na(df_immu$CRP.1), "CRP.1"] = 1 # 有个全角的
df_immu[, "CRP"] = df_immu[, "CRP"] %>% as.numeric
df_immu[, "CRP.1"] = df_immu[, "CRP.1"] %>% as.numeric
print(df_immu[, c("CRP", "CRP.1")])
# 统计每一列的缺失值
apply(is.na(df_immu), 2, sum) %>% data.frame() %>% t
df_redcell_par = raw_data[,c("姓名", "mcv", "mch", "mchc", "mcv.1", "mch.1", "mchc.1")]
df_redcell_par %>% head()
df_redcell_par$mch =
df_redcell_par$mch %>% as.numeric()
df_redcell_par %>% head()
# 统计每一列的缺失值
apply(is.na(df_redcell_par), 2, sum) %>% data.frame() %>% t
# 读入预测值
l_predictor = readRDS("outputs/l_outcome_predictor.rds")
df_predictor = l_predictor$df_predictor
df_predictor_1 = l_predictor$df_predictor_1
# 读入因变量值
l_outcome = readRDS("outputs/l_outcome.rds")
blood_value = l_outcome[[4]]
blood_value %>% head(10)
# 合并自变量和因变量
df_evidence = merge(df_predictor, blood_value)
df_evidence %>% head()
# 选择适合填补的，关于生理的数据
library(mice)
df_join = merge(df_evidence, df_immu) %>% merge(df_redcell_par)
df_join %>% names()
md.pattern(df_join)
# multiple impute the missing values
imp_1 = mice(df_join, maxit = 10, m = 2, seed = 1, meth = "rf")
# 考察插补的结果
imp_1$imp$IL.6.0.7pg.ml.$`1`
raw_data %>% colnames()
colnames(raw_data)[29:32]
colnames(raw_data)[24:31]
colnames(raw_data)[c(24:31, 57:64)]
var_基线免疫指标 = colnames(raw_data)[c(24:31)]
df_免疫指标 = raw_data[, c("姓名", var_基线免疫指标, var_随访免疫指标)]
var_基线免疫指标 = colnames(raw_data)[c(24:31)]
var_随访免疫指标 = colnames(raw_data)[c(57:64)]
df_免疫指标 = raw_data[, c("姓名", var_基线免疫指标, var_随访免疫指标)]
df_免疫指标 %>% head()
df_join = merge(df_evidence, df_immu) %>% merge(df_redcell_par)
# df_join = m
df_join %>% names()
df_join = merge(df_evidence, df_immu) %>% merge(df_redcell_par) %>% merge(df_免疫指标)
df_join %>% names()
md.pattern(df_join)
# multiple impute the missing values
imp_1 = mice(df_join, maxit = 10, m = 2, seed = 1, meth = "rf")
# 考察插补的结果
imp_1$imp$IL.6.0.7pg.ml.$`1`
df_join_imp = complete(imp_1, action = 2)
df_join_imp %>% head(20)
df_join_imp %>% head(20)
df_df_join_imp[, c("姓名", var_基线免疫指标, var_随访免疫指标)] %>% head(20)
df_df_join_imp[, c("姓名", var_基线免疫指标, var_随访免疫指标)] %>% head(20)
df_join_imp[, c("姓名", var_基线免疫指标, var_随访免疫指标)] %>% head(20)
df_join_imp[, c("姓名", var_基线免疫指标, var_随访免疫指标)] %>% View()
df_填补的免疫指标数据 = df_join_imp[, c("姓名", var_基线免疫指标, var_随访免疫指标)]
write.csv(df_填补的免疫指标数据, "outputs/df_填补的免疫指标数据.csv")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# load the useful packages
library(dplyr)
library(plotly)
library(CBCgrps)
library(networkD3)
library(PerformanceAnalytics)
##randomForest 包的随机森林
library(randomForest)
#使用 MASS 包 polr() 训练序数 logistic 回归，详情 ?polr
library(MASS)
library("ggpubr")
library(car)
library(multcomp)
# 回归分析表格数据!
# install.packages("gtsummary")
library("gtsummary")
# remotes::install_github("rstudio/gt", ref = gtsummary::gt_sha)
# install.packages('flextable')
library(flextable)
# export dataframe as excel file
library("writexl")
raw_data = read.csv("outputs/raw_data.csv", encoding="UTF-8")
raw_data[raw_data==""] = NA # convert the null values to NA
raw_data = raw_data[,1:78]
raw_data %>% dim()
raw_data = read.csv("outputs/raw_data.csv", encoding="UTF-8")
raw_data[raw_data==""] = NA # convert the null values to NA
raw_data = raw_data[,1:78]
raw_data %>% dim()
df_免疫指标分析
df_免疫指标 = read.csv("outputs/df_填补的免疫指标数据.csv")
df_免疫指标 %>% summary
df_免疫指标 = read.csv("outputs/df_填补的免疫指标数据.csv", row.names = F)
df_免疫指标 = read.csv("outputs/df_填补的免疫指标数据.csv")[-1]
df_免疫指标 %>% summary
df_免疫指标[, c(2:9)] %>% colnames()
var_基线免疫指标 = df_免疫指标[, c(2:9)] %>% colnames()
var_随访免疫指标 = df_免疫指标[, c(10:17)] %>% colnames()
var_基线免疫指标
var_随访免疫指标
apply(var_基线免疫指标, paste0, "1")
apply(var_基线免疫指标, paste0)
paste0(var_基线免疫指标, ".1")
var_免疫指标差值 = paste0(var_基线免疫指标, "差值")
var_基线免疫指标 = df_免疫指标[, c(2:9)] %>% colnames()
var_随访免疫指标 = df_免疫指标[, c(10:17)] %>% colnames()
var_免疫指标差值 = paste0(var_基线免疫指标, "差值")
df_免疫指标[var_免疫指标差值] = NA
for (i in 1:length(var_基线免疫指标)) {
df_免疫指标[var_免疫指标差值[i]] =
df_免疫指标[var_随访免疫指标][i] - df_免疫指标[var_基线免疫指标][i]
}
df_免疫指标 %>% str()
df_免疫指标 %>% log() %>% str()
df_免疫指标[var_免疫指标差值] = NA
for (i in 1:length(var_基线免疫指标)) {
df_免疫指标[var_免疫指标差值[i]] =
df_免疫指标[var_随访免疫指标][i] - df_免疫指标[var_基线免疫指标][i]
}
df_免疫指标 %>% str()
df_免疫指标 %>% log() %>% str()
df_免疫指标[var_免疫指标差值] = NA
for (i in 1:length(var_基线免疫指标)) {
df_免疫指标[var_免疫指标差值[i]] =
df_免疫指标[var_随访免疫指标][i] - df_免疫指标[var_基线免疫指标][i]
}
df_免疫指标 %>% str()
df_免疫指标[-1] %>% log() %>% str()
df_免疫指标[c(16:)]
df_免疫指标[c(16:23)]
df_免疫指标[c(16:23)] %>% colnames()
df_免疫指标[c(18:25)] %>% colnames()
df_免疫指标[c(18:25)] %>% summary()
df_免疫指标_log = df_免疫指标
df_免疫指标_log[-1] = df_免疫指标[-1] %>% log()
df_免疫指标_log %>% head(10)
df_免疫指标 = read.csv("outputs/df_填补的免疫指标数据.csv")[-1]
df_免疫指标 %>% summary
df_免疫指标_log = df_免疫指标
df_免疫指标_log[-1] = df_免疫指标[-1] %>% log()
df_免疫指标_log %>% head(10)
var_基线免疫指标 = df_免疫指标[, c(2:9)] %>% colnames()
var_随访免疫指标 = df_免疫指标[, c(10:17)] %>% colnames()
var_免疫指标差值 = paste0(var_基线免疫指标, "差值")
var_免疫指标差值 = paste0(var_基线免疫指标, "差值")
df_免疫指标_log[var_免疫指标差值] = NA
for (i in 1:length(var_基线免疫指标)) {
df_免疫指标_log[var_免疫指标差值[i]] =
df_免疫指标_log[var_随访免疫指标][i] - df_免疫指标_log[var_基线免疫指标][i]
}
df_免疫指标_log %>% str()
df_免疫指标_log[-1] %>% head()
df_免疫指标_log %>% write.csv("outputs/df_免疫指标_log.csv")
df_免疫指标_log[1]
?write.csv
df_免疫指标_log %>% write.csv("outputs/df_免疫指标_log.csv", col.names = F)
df_免疫指标_log %>% write.csv("outputs/df_免疫指标_log.csv", row.names = F)
