}
l_单因素回归[[2]]
get_glm_OR = function(fit_single_model, row_var=2) {
# 参数:
# fit_single_model: glm模型
# row_var: 第几个回归变量, 1为截距, 再单因素分析里面, 2为需要分析的因素
# 返回:
# 一个vector, 有四个列, 第一列OR的点估计, 第二列是区间下限(2.5%), 第三列是
# 区间上限(97,5%), 第四列是p值
vec_coef_p = coefficients(summary.glm(fit_single_model))[row_var, c(1,4)]
vec_cofint = confint(fit_single_model)[row_var,]
vec_est = c(vec_coef_p[1], vec_cofint, vec_coef_p[2])
vec_est[1:3] = exp(vec_est[1:3])
# vec_est = format(vec_est, scientific = FALSE, digits = 1)
# vec_est = as.numeric(vec_est)
return(vec_est)
}
# debug
vec_用药 = get_glm_OR(fit_血红蛋白与用药)
vec_用药 %>% print()
for (j in 1:length(var_单因素)) {
get_glm_OR(l_单因素回归[[j]]) %>% print()
}
result_OR = []
result_OR = vector()
result_OR = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
rbind(result_OR, c(1,2,3,4))
rbind(vector(), c(1,2,3,4))
result_OR_name = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
result_OR = vector()
for (j in 1:length(var_单因素)) {
rbind(result_OR, get_glm_OR(l_单因素回归[[j]]))
}
result_OR %>% print()
result_OR_name = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
result_OR = vector()
for (j in 1:length(var_单因素)) {
result_OR = rbind(result_OR, get_glm_OR(l_单因素回归[[j]]))
}
result_OR %>% print()
result_OR %>% as.data.frame() %>% print()
result_OR %>% as.data.frame() %>% format(scientific = FALSE, digits = 1) %>% print()
result_OR %>% as.data.frame() %>% format(scientific = FALSE, digits = 4) %>% print()
result_OR %>% as.data.frame() %>% format(scientific = FALSE) %>% print()
var_单因素[4]
var_单因素 = c("用药时间", "年龄", "bmi", "贫血程度", "IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "中性粒细胞绝对值", "中性粒.淋巴", "mchc", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1", "中性粒细胞绝对值.1", "中性粒.淋巴.1", "mchc.1")
df_data_glm[, var_单因素] %>% head()
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素,
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
result_OR_name = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
result_OR = vector()
for (j in 1:length(var_单因素)) {
result_OR = rbind(result_OR, get_glm_OR(l_单因素回归[[j]]))
}
result_OR %>% as.data.frame() %>% format(scientific = FALSE) %>% print()
result_OR %>% as.data.frame() %>% print()
rownames(result_OR) = var_单因素
rownames(result_OR) = var_单因素 %>% print()
result_OR_name = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
result_OR = vector()
for (j in 1:length(var_单因素)) {
result_OR = rbind(result_OR, get_glm_OR(l_单因素回归[[j]]))
}
rownames(result_OR) = var_单因素
result_OR %>% as.data.frame() %>% print()
result_OR[4]
result_OR[, 4]
result_OR[, 4]<0.2
result_OR[, 4]<0.25
rownames(result_OR)[result_OR[, 4]<0.25]
rownames(result_OR)[result_OR[, 4]<0.2]
rownames(result_OR)[result_OR[, 4]<0.25]
df_data_rf = df_data_glm[!(is.na(df_data_glm[, '血红蛋白是否改善'])), ]
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 贫血程度 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
df_data_glm
df_data_glm$血红蛋白
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
var_单因素 = c("用药时间", "年龄", "bmi", "血红蛋白", "IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "中性粒细胞绝对值", "中性粒.淋巴", "mchc", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1", "中性粒细胞绝对值.1", "中性粒.淋巴.1", "mchc.1")
df_data_glm[, var_单因素] %>% head()
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素,
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
result_OR_name = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
result_OR = vector()
for (j in 1:length(var_单因素)) {
result_OR = rbind(result_OR, get_glm_OR(l_单因素回归[[j]]))
}
rownames(result_OR) = var_单因素
result_OR %>% as.data.frame() %>% print()
rownames(result_OR)[result_OR[, 4]<0.25]
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 %>% coef %>% exp() %>% print()
fit_多因素_1 %>% confint() %>% exp() %>% print()
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 血红蛋白  + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_2)  #展示拟合回归的简单统计
fit_多因素_2 %>% coef %>% exp() %>% print()
fit_多因素_2 %>% confint() %>% exp() %>% print()
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 贫血程度  + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 贫血程度  + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_2)  #展示拟合回归的简单统计
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 血红蛋白 + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_2)  #展示拟合回归的简单统计
fit_多因素_2 %>% coef %>% exp() %>% print()
fit_多因素_2 %>% confint() %>% exp() %>% print()
write.csv(result_OR, "outputs/result_OR.csv")
把结果保存下来
# load the useful packages
library(dplyr)
library(plotly)
library(CBCgrps)
library(networkD3)
library(PerformanceAnalytics)
##randomForest 包的随机森林
library(randomForest)
#随机森林计算（默认生成 500 棵决策树），详情 ?randomForest
set.seed(123)
rf_多因素 =
randomForest(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc, data = df_data_rf, importance = TRUE)
rf_多因素
importance_rf_多因素 = rf_多因素$importance
head(importance_rf_多因素)
varImpPlot(rf_多因素, n.var = min(5, nrow(rf_多因素$importance)),
main = 'Top 5 - variable importance')
varImpPlot(rf_多因素, n.var = min(7, nrow(rf_多因素$importance)),
main = 'Top 7 - variable importance')
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# load the useful packages
library(dplyr)
library(plotly)
library(CBCgrps)
library(networkD3)
library(PerformanceAnalytics)
##randomForest 包的随机森林
library(randomForest)
raw_data = read.csv("outputs/raw_data.csv", encoding="UTF-8")
raw_data[raw_data==""] = NA # convert the null values to NA
raw_data = raw_data[,1:78]
raw_data %>% dim()
l_data_grpcop_glm = readRDS("outputs/l_dat_grpcop_glm.rds")
df_data_glm = l_data_grpcop_glm$df_data_glm
df_grpcop = l_data_grpcop_glm$df_grpcop
df_细胞比例 = raw_data[, c("姓名", "中性粒细胞绝对值", "淋巴细胞绝对值", "中性粒细胞绝对值.1", "淋巴细胞绝对值.1" )]
df_细胞比例[, "中性粒.淋巴"] = df_细胞比例[, "中性粒细胞绝对值"]/df_细胞比例[, "淋巴细胞绝对值"]
df_细胞比例[, "中性粒.淋巴.1"] = df_细胞比例[, "中性粒细胞绝对值.1"]/df_细胞比例[, "淋巴细胞绝对值.1"]
df_细胞比例 %>% head()
df_血红蛋白 = raw_data[, c("姓名", "血红蛋白", "血红蛋白.1")]
df_血红蛋白[, "血红蛋白变化值"] =  raw_data[, "血红蛋白.1"] - raw_data[, "血红蛋白"]
df_血红蛋白 %>% head()
# df_数据补充 = merge(df_血红蛋白, df_细胞比例)
df_grpcop = merge(df_血红蛋白, df_grpcop) %>% merge(df_细胞比例)
df_data_glm = merge(df_血红蛋白, df_data_glm) %>% merge(df_细胞比例)
# 引入函数
source("exploration/plot_items_pattern.R")
df_data_glm %>% dim()
par(mfrow=c(3,3))
plot_items_pattern(df_data_glm[,-1])
df_data_glm %>% colnames()
# 第94个, 不是第108个
df_data_glm[-c(94), "mch"] %>% log() %>% plot()
df_data_glm = df_data_glm[-c(94), ]
df_grpcop = df_grpcop[-c(94), ]
var_skewed = c("IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1", "mch", "mchc", "mch.1", "mchc.1", "中性粒细胞绝对值", "中性粒细胞绝对值.1", "中性粒.淋巴", "中性粒.淋巴.1" )
par(mfrow=c(3,3))
df_grpcop[, -1] %>% plot_items_pattern
# 把非数值的结果搞走
var_chr = c("姓名", "确诊部位", "病理类型")
chart.Correlation(df_grpcop[, !(colnames(df_grpcop) %in% var_chr)], histogram = TRUE, method = "pearson")
df_data_glm[, colnames(df_data_glm) %in% var_skewed] =
df_data_glm[, colnames(df_data_glm) %in% var_skewed] %>% log()
df_data_glm[, colnames(df_data_glm) %in% var_skewed] =
df_data_glm[, colnames(df_data_glm) %in% var_skewed] %>% log()
df_grpcop[, colnames(df_grpcop) %in% var_skewed] =
df_grpcop[, colnames(df_grpcop) %in% var_skewed] %>% log()
par(mfrow=c(3,3))
df_data_glm[, -1] %>% plot_items_pattern()
chart.Correlation(df_grpcop[, !(colnames(df_grpcop) %in% var_chr)], histogram = TRUE, method = "pearson")
# compare_hemoglobin
compare_hemoglobin = twogrps(df_grpcop[,-1], "血红蛋白是否改善")
compare_hemoglobin$Table %>% print()
#
write.csv(compare_hemoglobin$table, "outputs/compare_hemoglobin.csv")
#首先展示是否使用中药和贫血是否改善的一元 logistic 回归示例
#通过广义线性回归函数 glm() 执行 logistic 回归，详情 ?glm
#通过 family 参数指定了二项回归，即二分响应的 logistic 回归
fit_血红蛋白与用药 = glm(血红蛋白是否改善 ~ 用药时间, data = df_data_glm, family = binomial())
summary.glm(fit_血红蛋白与用药)  #展示拟合回归的简单统计
get_glm_OR = function(fit_single_model, row_var=2) {
# 参数:
# fit_single_model: glm模型
# row_var: 第几个回归变量, 1为截距, 再单因素分析里面, 2为需要分析的因素
# 返回:
# 一个vector, 有四个列, 第一列OR的点估计, 第二列是区间下限(2.5%), 第三列是
# 区间上限(97,5%), 第四列是p值
vec_coef_p = coefficients(summary.glm(fit_single_model))[row_var, c(1,4)]
vec_cofint = confint(fit_single_model)[row_var,]
vec_est = c(vec_coef_p[1], vec_cofint, vec_coef_p[2])
vec_est[1:3] = exp(vec_est[1:3])
# vec_est = format(vec_est, scientific = FALSE, digits = 1)
# vec_est = as.numeric(vec_est)
return(vec_est)
}
# debug
vec_用药 = get_glm_OR(fit_血红蛋白与用药)
vec_用药 %>% print()
var_单因素 = c("用药时间", "年龄", "bmi", "血红蛋白", "IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "中性粒细胞绝对值", "中性粒.淋巴", "mchc", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1", "中性粒细胞绝对值.1", "中性粒.淋巴.1", "mchc.1")
df_data_glm[, var_单因素] %>% head()
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素,
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
var_单因素
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素,
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
result_OR_name = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
result_OR = vector()
for (j in 1:length(var_单因素)) {
result_OR = rbind(result_OR, get_glm_OR(l_单因素回归[[j]]))
}
df_data_glm %>% head()
#首先展示是否使用中药和贫血是否改善的一元 logistic 回归示例
#通过广义线性回归函数 glm() 执行 logistic 回归，详情 ?glm
#通过 family 参数指定了二项回归，即二分响应的 logistic 回归
fit_血红蛋白与用药 = glm(血红蛋白是否改善 ~ 用药时间, data = df_data_glm, family = binomial())
summary.glm(fit_血红蛋白与用药)  #展示拟合回归的简单统计
get_glm_OR = function(fit_single_model, row_var=2) {
# 参数:
# fit_single_model: glm模型
# row_var: 第几个回归变量, 1为截距, 再单因素分析里面, 2为需要分析的因素
# 返回:
# 一个vector, 有四个列, 第一列OR的点估计, 第二列是区间下限(2.5%), 第三列是
# 区间上限(97,5%), 第四列是p值
vec_coef_p = coefficients(summary.glm(fit_single_model))[row_var, c(1,4)]
vec_cofint = confint(fit_single_model)[row_var,]
vec_est = c(vec_coef_p[1], vec_cofint, vec_coef_p[2])
vec_est[1:3] = exp(vec_est[1:3])
# vec_est = format(vec_est, scientific = FALSE, digits = 1)
# vec_est = as.numeric(vec_est)
return(vec_est)
}
# debug
vec_用药 = get_glm_OR(fit_血红蛋白与用药)
vec_用药 %>% print()
var_单因素 = c("用药时间", "年龄", "bmi", "血红蛋白", "IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "中性粒细胞绝对值", "中性粒.淋巴", "mchc", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1", "中性粒细胞绝对值.1", "中性粒.淋巴.1", "mchc.1")
df_data_glm[, var_单因素] %>% head()
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素,
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
lapply(c("用药时间"),
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
length(var_单因素)
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素[1:8],
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素[1:4],
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
l_单因素回归 =
lapply(var_单因素[1:5],
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
l_单因素回归 =
lapply(var_单因素[1:6],
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
var_单因素[6]
df_data_glm[CRP]
df_data_glm["CRP"]
raw_data["CRP"]
log(1)
df_data_glm["CRP"]
l_data_grpcop_glm = readRDS("outputs/l_dat_grpcop_glm.rds")
df_data_glm = l_data_grpcop_glm$df_data_glm
df_grpcop = l_data_grpcop_glm$df_grpcop
df_data_glm["CRP"]
df_data_glm["CRP"] %>% log()
l_data_grpcop_glm = readRDS("outputs/l_dat_grpcop_glm.rds")
df_data_glm = l_data_grpcop_glm$df_data_glm
df_grpcop = l_data_grpcop_glm$df_grpcop
df_细胞比例 = raw_data[, c("姓名", "中性粒细胞绝对值", "淋巴细胞绝对值", "中性粒细胞绝对值.1", "淋巴细胞绝对值.1" )]
df_细胞比例[, "中性粒.淋巴"] = df_细胞比例[, "中性粒细胞绝对值"]/df_细胞比例[, "淋巴细胞绝对值"]
df_细胞比例[, "中性粒.淋巴.1"] = df_细胞比例[, "中性粒细胞绝对值.1"]/df_细胞比例[, "淋巴细胞绝对值.1"]
df_细胞比例 %>% head()
df_血红蛋白 = raw_data[, c("姓名", "血红蛋白", "血红蛋白.1")]
df_血红蛋白[, "血红蛋白变化值"] =  raw_data[, "血红蛋白.1"] - raw_data[, "血红蛋白"]
df_血红蛋白 %>% head()
# df_数据补充 = merge(df_血红蛋白, df_细胞比例)
df_grpcop = merge(df_血红蛋白, df_grpcop) %>% merge(df_细胞比例)
df_data_glm = merge(df_血红蛋白, df_data_glm) %>% merge(df_细胞比例)
# 引入函数
source("exploration/plot_items_pattern.R")
df_data_glm %>% dim()
par(mfrow=c(3,3))
plot_items_pattern(df_data_glm[,-1])
df_data_glm %>% colnames()
# 第94个, 不是第108个
df_data_glm[-c(94), "mch"] %>% log() %>% plot()
df_data_glm = df_data_glm[-c(94), ]
df_grpcop = df_grpcop[-c(94), ]
var_skewed = c("IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1", "mch", "mchc", "mch.1", "mchc.1", "中性粒细胞绝对值", "中性粒细胞绝对值.1", "中性粒.淋巴", "中性粒.淋巴.1" )
par(mfrow=c(3,3))
df_grpcop[, -1] %>% plot_items_pattern
# 把非数值的结果搞走
var_chr = c("姓名", "确诊部位", "病理类型")
chart.Correlation(df_grpcop[, !(colnames(df_grpcop) %in% var_chr)], histogram = TRUE, method = "pearson")
df_data_glm[, colnames(df_data_glm) %in% var_skewed] =
df_data_glm[, colnames(df_data_glm) %in% var_skewed] %>% log()
df_grpcop[, colnames(df_grpcop) %in% var_skewed] =
df_grpcop[, colnames(df_grpcop) %in% var_skewed] %>% log()
df_data_glm["CRP"]
par(mfrow=c(3,3))
df_data_glm[, -1] %>% plot_items_pattern()
chart.Correlation(df_grpcop[, !(colnames(df_grpcop) %in% var_chr)], histogram = TRUE, method = "pearson")
# compare_hemoglobin
compare_hemoglobin = twogrps(df_grpcop[,-1], "血红蛋白是否改善")
compare_hemoglobin$Table %>% print()
#
write.csv(compare_hemoglobin$table, "outputs/compare_hemoglobin.csv")
#首先展示是否使用中药和贫血是否改善的一元 logistic 回归示例
#通过广义线性回归函数 glm() 执行 logistic 回归，详情 ?glm
#通过 family 参数指定了二项回归，即二分响应的 logistic 回归
fit_血红蛋白与用药 = glm(血红蛋白是否改善 ~ 用药时间, data = df_data_glm, family = binomial())
summary.glm(fit_血红蛋白与用药)  #展示拟合回归的简单统计
get_glm_OR = function(fit_single_model, row_var=2) {
# 参数:
# fit_single_model: glm模型
# row_var: 第几个回归变量, 1为截距, 再单因素分析里面, 2为需要分析的因素
# 返回:
# 一个vector, 有四个列, 第一列OR的点估计, 第二列是区间下限(2.5%), 第三列是
# 区间上限(97,5%), 第四列是p值
vec_coef_p = coefficients(summary.glm(fit_single_model))[row_var, c(1,4)]
vec_cofint = confint(fit_single_model)[row_var,]
vec_est = c(vec_coef_p[1], vec_cofint, vec_coef_p[2])
vec_est[1:3] = exp(vec_est[1:3])
# vec_est = format(vec_est, scientific = FALSE, digits = 1)
# vec_est = as.numeric(vec_est)
return(vec_est)
}
# debug
vec_用药 = get_glm_OR(fit_血红蛋白与用药)
vec_用药 %>% print()
var_单因素 = c("用药时间", "年龄", "bmi", "血红蛋白", "IL.6.0.7pg.ml.", "CRP", "淋巴细胞绝对值", "中性粒细胞绝对值", "中性粒.淋巴", "mchc", "IL.6.0.7pg.ml..1", "CRP.1", "淋巴细胞绝对值.1", "中性粒细胞绝对值.1", "中性粒.淋巴.1", "mchc.1")
df_data_glm[, var_单因素] %>% head()
length(var_单因素)
var_单因素[6]
# lapply(1:30, function(i) glm(as.formula(paste0('casecontrol ~ ', 'rs', i)), data = mydata, family = binomial))
l_单因素回归 =
lapply(var_单因素,
function(i) glm(as.formula(paste('血红蛋白是否改善 ~ ', i)), data = df_data_glm, family = binomial))
result_OR_name = c("OR", "2.5 %", "97.5 %", "Pr(>|z|)")
result_OR = vector()
for (j in 1:length(var_单因素)) {
result_OR = rbind(result_OR, get_glm_OR(l_单因素回归[[j]]))
}
rownames(result_OR) = var_单因素
result_OR %>% as.data.frame() %>% print()
write.csv(result_OR, "outputs/result_OR.csv")
rownames(result_OR)[result_OR[, 4]<0.25]
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 %>% coef %>% exp() %>% print()
fit_多因素_1 %>% confint() %>% exp() %>% print()
fit_多因素_1 %>% coef %>% exp() %>% print()
fit_多因素_1 %>% confint() %>% exp() %>% print()
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 血红蛋白 + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_2)  #展示拟合回归的简单统计
fit_多因素_2 %>% coef %>% exp() %>% print()
fit_多因素_2 %>% confint() %>% exp() %>% print()
df_data_glm["血红蛋白"]<108.5
df_data_glm[df_data_glm["血红蛋白"]<108.5, c("用药时间", "血红蛋白")]
df_data_glm[df_data_glm["血红蛋白"]<108.5, c("用药时间", "血红蛋白")]
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm[df_data_glm["血红蛋白"]<108.5, c("用药时间", "血红蛋白")],
family = binomial())
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm[df_data_glm["血红蛋白"]<108.5, ],
family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 %>% coef %>% exp() %>% print()
fit_多因素_1 %>% confint() %>% exp() %>% print()
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 血红蛋白 + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm, family = binomial())
summary.glm(fit_多因素_2)  #展示拟合回归的简单统计
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 血红蛋白 + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm[df_data_glm["血红蛋白"]<108.5, ],
family = binomial())
summary.glm(fit_多因素_2)  #展示拟合回归的简单统计
fit_多因素_2 %>% coef %>% exp() %>% print()
fit_多因素_2 %>% confint() %>% exp() %>% print()
df_data_rf = df_data_glm[!(is.na(df_data_glm[, '血红蛋白是否改善'])), ]
#随机森林计算（默认生成 500 棵决策树），详情 ?randomForest
set.seed(123)
rf_多因素 =
randomForest(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc, data = df_data_rf, importance = TRUE)
rf_多因素
colnames(df_data_glm)
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm[df_data_glm["血红蛋白"]<108.5, ],
family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm[df_data_glm["血红蛋白"]<108.5, ],
family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
colnames(df_data_glm)
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 贫血程度 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm[df_data_glm["血红蛋白"]<108.5, ],
family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 %>% coef %>% exp() %>% print()
fit_多因素_1 %>% confint() %>% exp() %>% print()
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 贫血程度 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm,
family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 %>% coef %>% exp() %>% print()
fit_多因素_1 %>% confint() %>% exp() %>% print()
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 年龄 + bmi + 贫血程度 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm,
family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 =
glm(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 贫血程度 + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm,
family = binomial())
summary.glm(fit_多因素_1)  #展示拟合回归的简单统计
fit_多因素_1 %>% coef %>% exp() %>% print()
fit_多因素_1 %>% confint() %>% exp() %>% print()
fit_多因素_2 =
glm(血红蛋白是否改善 ~ 用药时间 * 贫血程度 + 年龄 + bmi + CRP + 淋巴细胞绝对值 + mchc,
data = df_data_glm,
family = binomial())
summary.glm(fit_多因素_2)  #展示拟合回归的简单统计
fit_多因素_2 %>% coef %>% exp() %>% print()
fit_多因素_2 %>% confint() %>% exp() %>% print()
df_data_rf = df_data_glm[!(is.na(df_data_glm[, '血红蛋白是否改善'])), ]
#随机森林计算（默认生成 500 棵决策树），详情 ?randomForest
set.seed(123)
rf_多因素 =
randomForest(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc, data = df_data_rf, importance = TRUE)
rf_多因素
#随机森林计算（默认生成 500 棵决策树），详情 ?randomForest
set.seed(123)
rf_多因素 =
randomForest(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 贫血程度 + CRP + 淋巴细胞绝对值 + mchc, data = df_data_rf, importance = TRUE)
rf_多因素
#随机森林计算（默认生成 500 棵决策树），详情 ?randomForest
set.seed(123)
rf_多因素 =
randomForest(血红蛋白是否改善 ~ 用药时间 + 年龄 + bmi + 血红蛋白 + CRP + 淋巴细胞绝对值 + mchc, data = df_data_rf, importance = TRUE)
rf_多因素
importance_rf_多因素 = rf_多因素$importance
head(importance_rf_多因素)
varImpPlot(rf_多因素, n.var = min(7, nrow(rf_多因素$importance)),
main = 'Top 7 - variable importance')
chart.Correlation(df_grpcop[,c("用药时间", "血红蛋白")])
chart.Correlation(df_grpcop[,c("用药时间", "贫血程度")])
chart.Correlation(df_grpcop[,c("用药时间", "血红蛋白")])
chart.Correlation(df_grpcop[,c("用药时间", "血红蛋白", "贫血程度"])
chart.Correlation(df_grpcop[,c("用药时间", "血红蛋白", "贫血程度")])
write.csv(result_OR, "outputs/result_OR.csv")
# compare_hemoglobin
compare_hemoglobin = twogrps(df_grpcop[,-1], "血红蛋白是否改善")
compare_hemoglobin$Table %>% print()
#
write.csv(compare_hemoglobin$Table, "outputs/compare_hemoglobin.csv")
df_grpcop["血红蛋白变化值"] %>% plot
df_grpcop["血红蛋白变化值"] %>% barplot
df_grpcop["血红蛋白变化值"] %>% boxplot()
df_grpcop["血红蛋白变化值"] %>% summary()
l_exploration_1 = list(
df_data_glm = df_data_glm,
df_data_rf = df_data_rf,
df_grpcop = df_grpcop
)
saveRDS(l_exploration_1, "outputs/l_exploration_1.rds")
